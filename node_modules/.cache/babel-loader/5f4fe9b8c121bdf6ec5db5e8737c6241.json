{"ast":null,"code":"// const firebase = require(\"firebase/app\").default;\n// // require(\"firebase/auth\");\n// require(\"firebase/database\");\n// const firebaseConfig = {\n//   apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n//   authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n//   projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n//   storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n//   messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n//   appId: process.env.REACT_APP_FIREBASE_APP_ID,\n//   measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n// };\n// const USER_TABLE_NAME = process.env.REACT_APP_USER_TABLE_NAME;\n// let firebaseDb;\n// const init = () => {\n//   const app = firebase.initializeApp(firebaseConfig);\n//   firebaseDb = app.database().ref();\n// };\n// init();\nconst BACKEND_PROTOCOL = process.env.REACT_APP_BACKEND_PROTOCOL;\nconst BACKEND_HOST = process.env.REACT_APP_BACKEND_HOST;\nconst BACKEND_PORT = process.env.REACT_APP_BACKEND_PORT;\nconst ERROR_MESSAGE = \"Something went wrong. Please try again later.\";\n\nconst formatHTTPResponse = httpResponse => {\n  if (httpResponse.ok && httpResponse.status === 200) {\n    return httpResponse.json();\n  }\n\n  return {\n    isSuccess: false,\n    message: ERROR_MESSAGE\n  };\n};\n\nconst formatErrorResponse = error => {\n  return {\n    isSuccess: false,\n    message: error.message || ERROR_MESSAGE\n  };\n};\n\nconst APIPath = (endPoint, params) => {\n  let querystring = \"\";\n\n  if (params) {\n    querystring = `${querystring}&${Object.keys(params).map(key => `${key}=${encodeURIComponent(params[key])}`).join(\"&\")}`;\n  }\n\n  const path = `${BACKEND_PROTOCOL}://${BACKEND_HOST}:${BACKEND_PORT}/user/${endPoint}`;\n  return querystring === \"\" ? path : `${path}?${querystring}`;\n};\n\n_c = APIPath;\n\nconst header = payload => {\n  const headers = {\n    \"Content-type\": \"application/json\",\n    ...(payload.token && {\n      Authorization: payload.token\n    }),\n    ...payload.headers\n  };\n\n  if (headers[\"Content-type\"] === null) {\n    delete headers[\"Content-type\"];\n  }\n\n  Object.keys(headers).forEach(key => !headers[key] && delete headers[key]);\n  return headers;\n};\n\nconst onUpdate = () => {\n  // firebaseDb.child(USER_TABLE_NAME).on(\"value\", (snapshot) => {\n  //   const data = snapshot.val();\n  //   if (data != null) {\n  //     callback(Object.keys(data).map((id) => ({ id, ...data[id] })));\n  //   } else {\n  //     callback([]);\n  //   }\n  // });\n  return fetch(APIPath(\"user-list\", {}), {\n    method: \"GET\",\n    headers: header({})\n  }).then(response => formatHTTPResponse(response)).catch(error => formatErrorResponse(error));\n};\n\nconst create = obj => {\n  // firebaseDb.child(USER_TABLE_NAME).push(obj, (err) => {\n  //   if (err) {\n  //     console.log(err);\n  //     callback(err);\n  //     return;\n  //   }\n  //   callback(null);\n  // });\n  return fetch(APIPath(\"user-create\", {}), {\n    method: \"POST\",\n    headers: header({}),\n    body: JSON.stringify(obj)\n  }).then(response => formatHTTPResponse(response)).catch(error => formatErrorResponse(error));\n};\n\nconst update = (uid, obj) => {\n  // firebaseDb.child(`${USER_TABLE_NAME}/${id}`).set(obj, (err) => {\n  //   if (err) {\n  //     console.log(err);\n  //     callback(err);\n  //     return;\n  //   }\n  //   callback(null);\n  // });\n  return fetch(APIPath(\"user-update\", {}), {\n    method: \"POST\",\n    headers: header({}),\n    body: JSON.stringify({\n      uid,\n      ...obj\n    })\n  }).then(response => formatHTTPResponse(response)).catch(error => formatErrorResponse(error));\n};\n\nconst remove = uid => {\n  // firebaseDb.child(`${USER_TABLE_NAME}/${id}`).remove((err) => {\n  //   if (err) {\n  //     callback(err);\n  //     return;\n  //   }\n  //   callback(null);\n  // });\n  return fetch(APIPath(\"user-delete\", {}), {\n    method: \"POST\",\n    headers: header({}),\n    body: JSON.stringify({\n      uid\n    })\n  }).then(response => formatHTTPResponse(response)).catch(error => formatErrorResponse(error));\n}; // const detachListener = () => {\n//   firebaseDb.off();\n// };\n\n\nconst firebaseUtil = {\n  // detachListener,\n  onUpdate,\n  create,\n  update,\n  delete: remove\n};\nexport default firebaseUtil;\n\nvar _c;\n\n$RefreshReg$(_c, \"APIPath\");","map":{"version":3,"sources":["/home/invincix/Desktop/New folder/firebase-react-master/frontend/src/helper/firebase.js"],"names":["BACKEND_PROTOCOL","process","env","REACT_APP_BACKEND_PROTOCOL","BACKEND_HOST","REACT_APP_BACKEND_HOST","BACKEND_PORT","REACT_APP_BACKEND_PORT","ERROR_MESSAGE","formatHTTPResponse","httpResponse","ok","status","json","isSuccess","message","formatErrorResponse","error","APIPath","endPoint","params","querystring","Object","keys","map","key","encodeURIComponent","join","path","header","payload","headers","token","Authorization","forEach","onUpdate","fetch","method","then","response","catch","create","obj","body","JSON","stringify","update","uid","remove","firebaseUtil","delete"],"mappings":"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","sourcesContent":["// const firebase = require(\"firebase/app\").default;\n// // require(\"firebase/auth\");\n// require(\"firebase/database\");\n\n// const firebaseConfig = {\n//   apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n//   authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n//   projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n//   storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n//   messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n//   appId: process.env.REACT_APP_FIREBASE_APP_ID,\n//   measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n// };\n// const USER_TABLE_NAME = process.env.REACT_APP_USER_TABLE_NAME;\n\n// let firebaseDb;\n\n// const init = () => {\n//   const app = firebase.initializeApp(firebaseConfig);\n//   firebaseDb = app.database().ref();\n// };\n\n// init();\nconst BACKEND_PROTOCOL = process.env.REACT_APP_BACKEND_PROTOCOL;\nconst BACKEND_HOST = process.env.REACT_APP_BACKEND_HOST;\nconst BACKEND_PORT = process.env.REACT_APP_BACKEND_PORT;\n\nconst ERROR_MESSAGE = \"Something went wrong. Please try again later.\";\n\nconst formatHTTPResponse = (httpResponse) => {\n  if (httpResponse.ok && httpResponse.status === 200) {\n    return httpResponse.json();\n  }\n  return { isSuccess: false, message: ERROR_MESSAGE };\n};\nconst formatErrorResponse = (error) => {\n  return { isSuccess: false, message: error.message || ERROR_MESSAGE };\n};\n\nconst APIPath = (endPoint, params) => {\n  let querystring = \"\";\n  if (params) {\n    querystring = `${querystring}&${Object.keys(params)\n      .map((key) => `${key}=${encodeURIComponent(params[key])}`)\n      .join(\"&\")}`;\n  }\n  const path = `${BACKEND_PROTOCOL}://${BACKEND_HOST}:${BACKEND_PORT}/user/${endPoint}`;\n\n  return querystring === \"\" ? path : `${path}?${querystring}`;\n};\n\nconst header = (payload) => {\n  const headers = {\n    \"Content-type\": \"application/json\",\n    ...(payload.token && { Authorization: payload.token }),\n    ...payload.headers,\n  };\n\n  if (headers[\"Content-type\"] === null) {\n    delete headers[\"Content-type\"];\n  }\n\n  Object.keys(headers).forEach((key) => !headers[key] && delete headers[key]);\n\n  return headers;\n};\n\nconst onUpdate = () => {\n  // firebaseDb.child(USER_TABLE_NAME).on(\"value\", (snapshot) => {\n  //   const data = snapshot.val();\n  //   if (data != null) {\n  //     callback(Object.keys(data).map((id) => ({ id, ...data[id] })));\n  //   } else {\n  //     callback([]);\n  //   }\n  // });\n\n  return fetch(APIPath(\"user-list\", {}), {\n    method: \"GET\",\n    headers: header({}),\n  })\n    .then((response) => formatHTTPResponse(response))\n    .catch((error) => formatErrorResponse(error));\n};\n\nconst create = (obj) => {\n  // firebaseDb.child(USER_TABLE_NAME).push(obj, (err) => {\n  //   if (err) {\n  //     console.log(err);\n  //     callback(err);\n  //     return;\n  //   }\n  //   callback(null);\n  // });\n\n  return fetch(APIPath(\"user-create\", {}), {\n    method: \"POST\",\n    headers: header({}),\n    body: JSON.stringify(obj),\n  })\n    .then((response) => formatHTTPResponse(response))\n    .catch((error) => formatErrorResponse(error));\n};\n\nconst update = (uid, obj) => {\n  // firebaseDb.child(`${USER_TABLE_NAME}/${id}`).set(obj, (err) => {\n  //   if (err) {\n  //     console.log(err);\n  //     callback(err);\n  //     return;\n  //   }\n  //   callback(null);\n  // });\n\n  return fetch(APIPath(\"user-update\", {}), {\n    method: \"POST\",\n    headers: header({}),\n    body: JSON.stringify({ uid, ...obj }),\n  })\n    .then((response) => formatHTTPResponse(response))\n    .catch((error) => formatErrorResponse(error));\n};\n\nconst remove = (uid) => {\n  // firebaseDb.child(`${USER_TABLE_NAME}/${id}`).remove((err) => {\n  //   if (err) {\n  //     callback(err);\n  //     return;\n  //   }\n  //   callback(null);\n  // });\n\n  return fetch(APIPath(\"user-delete\", {}), {\n    method: \"POST\",\n    headers: header({}),\n    body: JSON.stringify({ uid }),\n  })\n    .then((response) => formatHTTPResponse(response))\n    .catch((error) => formatErrorResponse(error));\n};\n\n// const detachListener = () => {\n//   firebaseDb.off();\n// };\n\nconst firebaseUtil = {\n  // detachListener,\n  onUpdate,\n  create,\n  update,\n  delete: remove,\n};\n\nexport default firebaseUtil;\n"]},"metadata":{},"sourceType":"module"}